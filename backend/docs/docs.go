// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/shopping-lists": {
            "get": {
                "description": "Загружает все списки покупок вместе с их элементами",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "shopping-lists"
                ],
                "summary": "Возвращает все списки покупок",
                "responses": {
                    "200": {
                        "description": "Списки покупок успешно получены",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ShoppingList"
                            }
                        }
                    },
                    "500": {
                        "description": "Не удалось получить списки покупок",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Создает новый список покупок",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "shopping-lists"
                ],
                "summary": "Создать список покупок",
                "parameters": [
                    {
                        "description": "Список покупок",
                        "name": "shoppingList",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ShoppingList"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.ShoppingList"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/shopping-lists/{id}": {
            "get": {
                "description": "Загружает список покупок вместе с его элементами, используя предоставленный ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "shopping-lists"
                ],
                "summary": "Возвращает список покупок по указанному ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID списка покупок",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список покупок успешно получен",
                        "schema": {
                            "$ref": "#/definitions/model.ShoppingList"
                        }
                    },
                    "404": {
                        "description": "Список покупок не найден",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Обновляет данные списка покупок, используя предоставленный ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "shopping-lists"
                ],
                "summary": "Обновляет существующий список покупок по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID списка покупок",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные списка покупок для обновления",
                        "name": "list",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ShoppingList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список покупок успешно обновлен",
                        "schema": {
                            "$ref": "#/definitions/model.ShoppingList"
                        }
                    },
                    "400": {
                        "description": "Недопустимые данные",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Список покупок не найден",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка обновления списка покупок",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаляет список покупок, используя предоставленный ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "shopping-lists"
                ],
                "summary": "Удаляет существующий список покупок по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID списка покупок",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список покупок успешно удален",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка удаления списка покупок",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.ShoppingItem": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount количество данного элемента (опционально)",
                    "type": "integer"
                },
                "created_at": {
                    "description": "CreatedAt время создания записи",
                    "type": "string"
                },
                "id": {
                    "description": "ID уникальный идентификатор элемента",
                    "type": "integer"
                },
                "name": {
                    "description": "Name название элемента",
                    "type": "string"
                },
                "shopping_list_id": {
                    "description": "ShoppingListID идентификатор связанного списка покупок",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "UpdatedAt время последнего обновления записи",
                    "type": "string"
                }
            }
        },
        "model.ShoppingList": {
            "type": "object",
            "properties": {
                "completed": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ShoppingItem"
                    }
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "responses.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:4000",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Shopping List API",
	Description:      "API сервиса для управления списками покупок.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
